#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
"""

import asyncio
import sys
from pathlib import Path
from loguru import logger

# Add src directory to Python path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from database.database import init_db
from database.models_v2 import CryptoAsset
from collect_investment_metrics import InvestmentMetricsCollector

async def test_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫"""
    logger.info("üß™ Testing MATIC Investment Analysis System...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        init_db()
        logger.info("‚úÖ Database initialized")
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ MATIC –≤ –±–∞–∑–µ
        from database.database import SessionLocal
        session = SessionLocal()
        
        matic_asset = session.query(CryptoAsset).filter(
            CryptoAsset.symbol == "MATIC"
        ).first()
        
        if not matic_asset:
            logger.warning("‚ö†Ô∏è MATIC asset not found in database")
            logger.info("üí° Run 'python fill_polygon_data.py' to populate the database")
            return False
        
        logger.info(f"‚úÖ Found MATIC asset: {matic_asset.name} (ID: {matic_asset.id})")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫
        async with InvestmentMetricsCollector() as collector:
            logger.info("üìä Testing metrics collection...")
            
            # –°–æ–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∞
            try:
                financial_metrics = await collector._collect_financial_metrics(matic_asset)
                if financial_metrics:
                    logger.info("‚úÖ Financial metrics collection successful")
                    logger.info(f"   Current price: ${financial_metrics.get('price_usd', 0):.4f}")
                    logger.info(f"   Market cap: ${financial_metrics.get('market_cap', 0):,.0f}")
                else:
                    logger.warning("‚ö†Ô∏è No financial metrics collected")
            except Exception as e:
                logger.error(f"‚ùå Financial metrics collection failed: {e}")
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å GitHub –º–µ—Ç—Ä–∏–∫–∏
            try:
                github_metrics = await collector._collect_github_metrics(matic_asset)
                if github_metrics:
                    logger.info("‚úÖ GitHub metrics collection successful")
                    logger.info(f"   Stars: {github_metrics.get('stars', 0):,}")
                    logger.info(f"   Commits (30d): {github_metrics.get('commits_30d', 0)}")
                else:
                    logger.warning("‚ö†Ô∏è No GitHub metrics collected")
            except Exception as e:
                logger.error(f"‚ùå GitHub metrics collection failed: {e}")
        
        session.close()
        
        logger.info("üéâ System test completed!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå System test failed: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ MATIC Investment System Test")
    logger.info("=" * 40)
    
    success = await test_system()
    
    if success:
        logger.info("‚úÖ All tests passed! System is ready to use.")
        logger.info("")
        logger.info("üöÄ Next steps:")
        logger.info("   1. Run 'python run_investment_analysis.py' for full analysis")
        logger.info("   2. Open 'matic_investment_dashboard.html' to view results")
        logger.info("   3. Check 'matic_investment_report.json' for detailed analysis")
    else:
        logger.error("‚ùå Tests failed! Please check the configuration and try again.")
        logger.info("")
        logger.info("üîß Troubleshooting:")
        logger.info("   1. Check API keys in .env file")
        logger.info("   2. Ensure database is initialized")
        logger.info("   3. Run 'python fill_polygon_data.py' to populate data")

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger.remove()
    logger.add(
        sys.stdout,
        format="<green>{time:HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan> - <level>{message}</level>",
        level="INFO"
    )
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    asyncio.run(main())
