version: '3.8'

services:
  # Service Discovery
  eureka-server:
    build: ./platform-services/eureka-server
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - JVM_OPTS=-Xms512m -Xmx1g -XX:+UseG1GC
    networks:
      - defimon-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Configuration Server
  config-server:
    build: ./platform-services/config-server
    ports:
      - "8888:8888"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka
      - JVM_OPTS=-Xms256m -Xmx512m -XX:+UseG1GC
    depends_on:
      - eureka-server
    networks:
      - defimon-network

  # API Gateway
  api-gateway:
    build: ./platform-services/api-gateway
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
      - JVM_OPTS=-Xms1g -Xmx2g -XX:+UseG1GC -XX:MaxGCPauseMillis=200
    depends_on:
      - eureka-server
      - config-server
    networks:
      - defimon-network

  # Message Queue - Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - defimon-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JVM_PERFORMANCE_OPTS: "-Xms1g -Xmx2g -XX:+UseG1GC"
    depends_on:
      - zookeeper
    networks:
      - defimon-network

  # Redis Cluster
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - defimon-network

  # Databases
  postgresql:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: defimon_db
      POSTGRES_USER: defimon
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./infrastructure/databases/postgresql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - defimon-network

  influxdb:
    image: influxdb:2.7-alpine
    ports:
      - "8086:8086"
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: defimon
      DOCKER_INFLUXDB_INIT_PASSWORD: password
      DOCKER_INFLUXDB_INIT_ORG: defimon
      DOCKER_INFLUXDB_INIT_BUCKET: metrics
    volumes:
      - influx-data:/var/lib/influxdb2
    networks:
      - defimon-network

  mongodb:
    image: mongo:7-jammy
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: defimon
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - mongo-data:/data/db
    networks:
      - defimon-network

  # Java 8 Services
  data-collector:
    build: ./data-services/data-collector-service
    ports:
      - "8100:8100"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - SPRING_REDIS_HOST=redis
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgresql:5432/defimon_db
      - JVM_OPTS=-Xms2g -Xmx4g -XX:+UseG1GC -XX:MaxGCPauseMillis=100
    depends_on:
      - eureka-server
      - kafka
      - redis
      - postgresql
    networks:
      - defimon-network

  bitcoin-service:
    build: ./blockchain-services/bitcoin-service
    ports:
      - "8200:8200"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka
      - BITCOIN_QUICKNODE_RPC_URL=https://orbital-twilight-mansion.btc.quiknode.pro/a1280f4e959966b62d579978248263e3975e3b4d/
      - BITCOIN_QUICKNODE_RPC_USER=bitcoin
      - BITCOIN_QUICKNODE_RPC_PASSWORD=ultrafast_archive_node_2024
      - JVM_OPTS=-Xms1g -Xmx2g -XX:+UseG1GC
    depends_on:
      - eureka-server
    networks:
      - defimon-network

  ethereum-service:
    build: ./blockchain-services/ethereum-service
    ports:
      - "8201:8201"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka
      - JVM_OPTS=-Xms1g -Xmx2g -XX:+UseG1GC
    depends_on:
      - eureka-server
    networks:
      - defimon-network

  polygon-service:
    build: ./blockchain-services/polygon-service
    ports:
      - "8202:8202"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka
      - JVM_OPTS=-Xms1g -Xmx2g -XX:+UseG1GC
    depends_on:
      - eureka-server
    networks:
      - defimon-network

  # Monitoring
  prometheus:
    image: prom/prometheus:v2.45.0
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - defimon-network

  grafana:
    image: grafana/grafana:10.0.0
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infrastructure/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - defimon-network

  jaeger:
    image: jaegertracing/all-in-one:1.47
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - defimon-network

volumes:
  postgres-data:
  influx-data:
  mongo-data:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  defimon-network:
    driver: bridge
